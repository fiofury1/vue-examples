In this introdution to Vue, we show a simple Vue app and explain several core principles of Vue.  

A Vue app is created by "instantiating a Vue object"... we could also say we are "creating a Vue instance".  We do this in our JavaScript, typically in an external JS file.  Here we've defined our Vue instance in a file called index.js.

The Vue app will give us the ability to control the rendering and behavior of the page within the scope of the Vue app.  Remember that Vue is JavaScript so it controls page rendering and behavior by interacting with the DOM.  In Vue, the control of page rendering and behavior is done through the properties and methods of the Vue object itself coupled with special html attributes, syntax, and user defined tags (called components) provided by and defined in Vue.

When we instantiate the Vue object using the Vue function.  We pass it a JavaScript object as an argument.  The object is called the "options object".

In this case, the properties of the object we pass are "el" and "data", but there are other properties we can pass as well.  We will also show that the object can contain methods.

"el" is sort for "element".  The "el" property is used to specify what element we would like the Vue object to "target"... in this case "#app".  In Vue lingo, Vue developers might say that the Vue object "binds to the app element".

The "data" property is used to pass data to the Vue object.  We assign it a JavaScript object (called the "data" object).  The properties of the data object are named and defined by the developer.  The properties of the data object become properties of the Vue object.  In this case, we chose to define a property called "message".  

We can now reference "message" within our targeted element of our html.  

We show three different examples of how "message" can be used in our page:
- Template tag syntax.
- v-text directive
- v-html directive

When we use the tag {{ message }} within the bound html element, the browser knows to insert the value of message into the DOM and update the rendering whenever the value of message property of our Vue instance changes.  In Vue parlance, we say that the value of the message property is "bound" to the tag.  We'll find that Vue is all about "binding", which refers to tying a value or method of the Vue object (OR the entire instance itself) to a place in our html.  Since we are binding a property from our Vue instance here, it is acalled "data binding".  More specifically, use of this "mustache syntax" is called "text interpolation".   

When we use "v-text" directive, the value of message is inserted as the content of the element.  This is another from of binding.  

Similarly, when we use "v-html" directive, the value of message is inserted as the content of the element.  

Note, that the value in {{}} and "v-text" is interpolated as text, whereas the value of "v-html" is interploated as html, so if there where html tags within "message" their values would be interpeted as text for {{}} and "v-text" and html for "v-html".  

Also note, that what is between the mustaches or is assigned to v-text/v-html is not string, if it was, then the literal "message" would be rendered, and not the value of the property message.  In fact, it is an expression.  This means we can do things like call methods and perform operations between the {{}}'s and' ""'s.

With our bindings in place, we can use JS to update the value displayed wherever the property message is used.  This is done via:

    app.message = "Something new";

Try the above in the console, and see what happends.

We call this "declarative rendering" because the HTML is rendered through JS declarations.

Note that we're doing something new here with data.  Up until now, the data for our web pages has been defined in HTML (or possibly JavaScript) but always stored in the DOM, with the DOM being the "source of truth" i.e. where the data lived.  We might have used JavaScript (ex. JQuery) to update ("query)") the data in the DOM, where we'd do something with it, then return it back to the DOM.  In this example, we have a property, "message" which is stored outside of the DOM.  It's lives in JavaScript/Vue land!  We insert it into our DOM for rendering at our choosing.

Oh, by the way, you may have heared about something called the "Virtual DOM".  Well guess what?  The JavaScript/Vue land where the data exits, is the "Virtual DOM".  

Technically speaking, the "Virtual DOM" is actually the Vue object itself, including it's properties, stored in memory.