- Computed properties are in some ways like a variable, in some ways like a function, and in some ways like an expression.

- Computed properties are used to "return and show values" and are used in place of complex reactive expressions.

- Computed properties update automatically when any of the values they depend upon change.  This makes them like an reactive exrpession.  On the other hand, this makes them different than functions, which need to be called to update the value they return OR are called when rerendering the section where they are used.  

- You might say, "why not just use an expression" in a tag or directive... That will update autmoatically, too.  This is true, but if the expression is complex, it would make your markup ugly and hard to follow.  Instead, you can use a computed property to simplify our markup, keeping it clean.  

- "Computed properties" are also called "computed values".

The are defined like functions but are used and behave like properties.

Like properties, their values are cached.  Each use of the computed property references the same cached value.  If you have a computational expensive computed property, you can use it multilpe times and it will only be computed once.  It doesn't need to be recomputed for each use.

They are used in html like properties (i.e. without the () required to call a function).

The fact that computed properties update automatically makes them like properties (and expressions).  As a result, like properties, computed properties are used for data binding.  

It is best practice not to modify properties in our computed property definitions.

You should think of computed properties as an extension of your data model.

